#+TITLE: Emacs org configuration file
#+AUTHOR: Carlos Perez

#+DESCRIPTION: A literate programming version of my Emacs Initialization of Org-Mode

#+PROPERTY:    header-args:emacs-lisp  :tangle ~/.emacs.d/elisp/init-org-mode.el
#+PROPERTY:    header-args:sh     :tangle no
#+PROPERTY:    header-args:       :results silent   :eval no-export   :comments org

* Technical Artifacts
Need to provide the =init-org-mode= so that I can require this
package.

#+BEGIN_SRC emacs-lisp
(provide 'init-org-mode)
#+END_SRC

Before you can build this on a new system, make sure that you put the cursor
over any of these properties, and hit: =C-c C-c=
* General look
** Theme
Adapted from [[https://github.com/mwfogleman/.emacs.d/blob/master/michael.org][mwfogleman/.emacs.d · GitHub]]
The theming is derived from [[https://lepisma.github.io/2017/10/28/ricing-org-mode/][Ricing up Org Mode]]
Use this also as a reference for fonts: [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][Beautifying Org Mode in Emacs]]
#+BEGIN_SRC emacs-lisp :results silent
  (use-package org
    :ensure t
    :bind (("C-c l" . org-store-link)
           ("C-c c" . org-capture)
           ("C-M-|" . indent-rigidly)
           ("C-c b" . org-iswitchb)
           ("C-c a" . org-agenda))

    :custom-face
    (variable-pitch ((t (:family "ETBembo" :height 1.1))))
    (fixed-pitch ((t ( :family "UbuntuMono" :slant normal :weight normal :height 0.9 :width normal))))
    (org-document-title ((t (:foreground "#171717" :weight bold :height 1.6))))
    (org-done ((t (:background "#E8E8E8" :foreground "#0E0E0E" :strike-through t :weight bold))))
    (org-headline-done ((t (:foreground "#171717" :strike-through t))))
    (org-level-1 ((t (:foreground "#090909" :weight bold :height 1.4))))
    (org-level-2 ((t (:foreground "#090909" :weight normal :height 1.3))))
    (org-level-3 ((t (:foreground "#090909" :weight normal :height 1.2))))
    (org-image-actual-width '(600))

    :init
    (setq default-major-mode 'org-mode
          org-directory "~/org/"
          org-log-done t
          org-startup-indented nil
          org-startup-truncated nil
          org-startup-with-inline-images t
          org-completion-use-ido t
          ;; org-default-notes-file (concat org-directory "notes.org")
          org-image-actual-width '(300)
          org-goto-max-level 10
          org-imenu-depth 5
          org-goto-interface 'outline-path-completion
          org-outline-path-complete-in-steps nil
          org-src-fontify-natively t
          org-lowest-priority ?C
          org-default-priority ?B
          org-expiry-inactive-timestamps t
          org-show-notification-handler 'message
          org-special-ctrl-a/e t
          org-special-ctrl-k t
          org-yank-adjusted-subtrees t
          ;; Theming
          org-ellipsis "  " ;; folding symbol
          org-pretty-entities t
          org-hide-emphasis-markers t ;; show actually italicized text instead of /italicized text/
          org-agenda-block-separator ""
          org-fontify-whole-heading-line t
          org-fontify-done-headline t
          org-fontify-quote-and-verse-blocks t) 

    (add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))
    (add-to-list 'auto-mode-alist '(".*/[0-9]*$" . org-mode))   ;; Journal
    
    (add-hook 'org-mode-hook
              '(lambda ()
                 ;; (setq line-spacing 0.2) ;; Add more line padding for readability
                 (variable-pitch-mode 1) ;; All fonts with variable pitch.
                 (mapc
                  (lambda (face) ;; Other fonts with fixed-pitch.
                    (set-face-attribute face nil :inherit 'fixed-pitch))
                  (list 'org-code
                        'org-link
                        'org-block
                        'org-table
                        'org-date
                        'org-verbatim
                        'org-block-begin-line
                        'org-block-end-line
                        'org-meta-line
                        'org-document-info-keyword))))
    (custom-set-faces
     '(org-block-begin-line
       ((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))
     '(org-block-end-line
       ((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))))
    )
#+END_SRC

** Org bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :init
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

* Timer
#+BEGIN_SRC emacs-lisp :results silent
;;(setq org-clock-sound nil) ;; no sound
(setq org-clock-sound t) ;; Standard Emacs beep

#+END_SRC

* Org-cliplink
A simple command that takes a URL from the clipboard and inserts an org-mode
link with a title of a page found by the URL into the current buffer.

[[https://github.com/rexim/org-cliplink][GitHub - rexim/org-cliplink: Insert org-mode links from clipboard]]

#+BEGIN_SRC emacs-lisp :results silent
(use-package org-cliplink
  :ensure t
  :config
  (global-set-key (kbd "C-x p i") 'org-cliplink)
  )
#+END_SRC

* Org download
Drag and drop images to Emacs org-mode
[[https://github.com/abo-abo/org-download][GitHub - abo-abo/org-download: Drag and drop images to Emacs org-mode]]

#+BEGIN_SRC emacs-lisp
(use-package org-download
  :ensure t)
#+END_SRC

* Properties
To make quicknotes inside a logbook drawer
#+BEGIN_SRC emacs-lisp
(setq org-log-into-drawer t)
#+END_SRC

Create templates for properties

#+BEGIN_SRC emacs-lisp :results silent
(add-to-list 'org-structure-template-alist
             (list "pp" (concat
                         ":PROPERTIES:\n"
                         ":State: ?\n"
                         ":END:"
)))

#+END_SRC

* Agenda
** Custom views
The entries in the list giving the custom command are:

- A shortcut key using after C-c a to access the agenda.
- A description.
- The type of agenda (agenda in this case).  agenda, todo and tags are the most
  useful types.
- For tags and todo types this is the tags or todo items to search for. For the
  agenda type it should be an empty string.
- A list of pairs (variable value) giving various settings to customize the
  agenda.

#+BEGIN_SRC emacs-lisp :results silent
(setq org-agenda-custom-commands
      '(("S" "Someday"
        todo "SOMEDAY"
        )

      ("i" "Urgent and calls"
       ((todo "TODO")
        (tags "PHONE")))))

#+END_SRC

* Goals
Create a template for SMART goals

* Refile
:PROPERTIES:
:header-args: :tangle no
:END:
Change org refile targets to be context dependent
#+BEGIN_SRC emacs-lisp :results silent
(defun my/org-refile-in-file (&optional prefix)
  "Refile to a target within the current file."
  (interactive)
  (let ((org-refile-targets `(((,(buffer-file-name)) :maxlevel . 6))))
    (call-interactively 'org-refile)))
#+END_SRC

* Clocking
Keep clock times into a clocking drawer

#+BEGIN_SRC emacs-lisp :results silent
(setq org-clock-into-drawer "CLOCKING")
#+END_SRC

End.

* Tables

#+BEGIN_SRC emacs-lisp
(use-package orgtbl-aggregate
  :ensure t
  )
#+END_SRC

* Org-journal
** Basic config

#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :ensure t
    :defer t
    :after org
    :bind ("C-c f j" . org-journal-new-entry)
    :custom
    (org-journal-date-format "%e %b %Y (%A)")
    (org-journal-dir "~/journal/")
    (org-journal-file-format "%Y%m%d")
    (org-journal-time-format "")
    (org-journal-date-prefix "#+TITLE: ")
    )

#+END_SRC

The time format is the heading for each section. I set it to a blank since I
really don’t care about the time I add a section.
** TODO Template
This template is intended to insert a basic dailies list automatically into
each journal file. Unfortunately, it seems to break other functionality, so I
decided to leave it only as a reference and stick to a basic
~org-journal-date-format~

#+BEGIN_SRC emacs-lisp
  (defun org-journal-date-format-func (time)
    "Custom function to insert journal date header,
  and some custom text on a newly created journal file."
    (when (= (buffer-size) 0)
      (insert (format-time-string "#+TITLE: Journal Entry- %e %b %Y (%A)" time))
      (insert "\n\n\n* Dailies
     + [ ] The 3 most important tasks [0/3]
        - [ ]
        - [ ]
        - [ ] 
     + [ ] Other tasks that are in the system [0/2]
        - [ ]
        - [ ]
     + [ ] ToDos which are not tracked by my system [0/1]
        - [ ]
  \n\n* Diary")
      ))

  ;; (setq org-journal-date-format 'org-journal-date-format-func)
#+END_SRC

** Capture 
This capture automatically inserts an entry into today's journal file.

#+BEGIN_SRC emacs-lisp
  (defun org-journal-find-location ()
    ;; Open today's journal, but specify a non-nil prefix argument in order to
    ;; inhibit inserting the heading; org-capture will insert the heading.
    (org-journal-new-entry t)
    ;; Position point on the journal's top-level heading so that org-capture
    ;; will add the new entry as a child entry.
    (goto-char (point-min)))

  (setq org-capture-templates '(("j" "Journal entry" entry (function org-journal-find-location)
                                 "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?\nFrom: %a")))
#+END_SRC

* GTD
** Introduction
This system will I will implement a GTD system mainly based on [[http://www.howardism.org/Technical/Emacs/getting-boxes-done.html][Getting Boxes
Done]] by Howard Abrams. I think it is maybe the first explanation that really
clicks, so I hope it will be a good starting point

** File organization
First, a definition of all file destinations

#+BEGIN_SRC emacs-lisp
(defvar org-default-myfiles-dir
  "~/Dropbox/my_files/"
  "Root directory.")

(defvar org-default-projects-dir
  (concat org-default-myfiles-dir  "projects/")
  "Primary GTD directory.")

(defvar org-default-technical-dir
  (concat org-default-myfiles-dir  "technical/")
  "Directory of shareable notes.")

(defvar org-default-personal-dir
  (concat org-default-myfiles-dir  "personal/")
  "Directory of un-shareable, personal notes.")

(defvar org-default-completed-dir
  (concat org-default-projects-dir "trophies/")
  "Directory of completed project files.")

(defvar org-default-inbox-file
  (concat org-default-projects-dir "breathe.org")
  "New stuff collects in this file.")

(defvar org-default-tasks-file
  (concat org-default-projects-dir "tasks.org")
  "Tasks, TODOs and little projects.")

(defvar org-default-incubate-file
  (concat org-default-projects-dir "incubate.org")
  "Ideas simmering on backburner.")
  
(defvar org-default-completed-file
  nil
  "Ideas simmering on back burner.")

(defvar org-default-notes-file
  (concat org-default-personal-dir "general-notes.org")
  "Non-actionable, personal notes.")

(defvar org-default-media-file
  (concat org-default-projects-dir "media.org")
  "White papers and links to other things to check out.")
#+END_SRC 

Add all the files in the ~projects~ directory as potential agenda files

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (list org-default-projects-dir))
(setq org-agenda-file-regexp "^[a-z0-9-_]+.org")
#+END_SRC

*** TODO automatically create directories
Maybe should not be a problem if using Dropbox, as it gets synchronized. Only
need to change the ~org-deafult-myfiles-dir~

** The inbox
Everything beings in the inbox folder

#+BEGIN_SRC emacs-lisp
  (defvar org-capture-templates (list))

  (add-to-list 'org-capture-templates
               `("t" "Task Entry"        entry
                 (file ,org-default-inbox-file)
                 "* %?\n:PROPERTIES:\n:CREATED:%U\n:END:\n\n%i\n\nFrom: %a"
                 :empty-lines 1))

  (add-to-list 'org-capture-templates
               `("k" "Bookmarks"  entry
                 (file ,org-default-inbox-file)
                 ("* %(org-cliplink-capture)\n:PROPERTIES:\n:CREATED:%U\n:END:\n%?")
                 :empty-lines 1 :prepend t))

#+END_SRC

** Refiling
*** Hydra menu
#+BEGIN_SRC emacs-lisp :results silent
(defhydra hydra-org-refiler (org-mode-map "C-c s" :hint nil)
    "
  ^Navigate^      ^Refile^       ^Move^           ^Update^        ^Go To^        ^Dired^
  ^^^^^^^^^^---------------------------------------------------------------------------------------
  _k_: ↑ previous _t_: tasks     _m X_: projects  _T_: todo task  _g t_: tasks    _g X_: projects
  _j_: ↓ next     _i_: incubate  _m P_: personal  _S_: schedule   _g i_: incubate _g P_: personal
  _c_: archive    _p_: personal  _m T_: technical _D_: deadline   _g x_: inbox    _g T_: technical
  _d_: delete     _r_: refile                   _R_: rename     _g n_: notes    _g C_: completed
  "
    ("<up>" org-previous-visible-heading)
    ("<down>" org-next-visible-heading)
    ("k" org-previous-visible-heading)
    ("j" org-next-visible-heading)
    ("c" org-archive-subtree-as-completed)
    ("d" org-cut-subtree)
    ("t" org-refile-to-task)
    ("i" org-refile-to-incubate)
    ("p" org-refile-to-personal-notes)
    ("r" org-refile)
    ("m X" org-refile-to-projects-dir)
    ("m P" org-refile-to-personal-dir)
    ("m T" org-refile-to-technical-dir)
    ("T" org-todo)
    ("S" org-schedule)
    ("D" org-deadline)
    ("R" org-rename-header)
    ("g t" (find-file-other-window org-default-tasks-file))
    ("g i" (find-file-other-window org-default-incubate-file))
    ("g x" (find-file-other-window org-default-inbox-file))
    ("g c" (find-file-other-window org-default-completed-file))
    ("g n" (find-file-other-window org-default-notes-file))
    ("g X" (dired org-default-projects-dir))
    ("g P" (dired org-default-personal-dir))
    ("g T" (dired org-default-technical-dir))
    ("g C" (dired org-default-completed-dir))
    ("[\t]" (org-cycle))
    ("s" (org-save-all-org-buffers) "save")
    ("q" nil "quit"))

(bind-key "C-c s" 'hydra-org-refiler/body)

#+END_SRC

*** TODO Allow refiles as top level destination

#+BEGIN_SRC emacs-lisp
(setq org-refile-use-outline-path 'file
      org-outline-path-complete-in-steps nil)
#+END_SRC

Set all files in projects as refile targets.

#+BEGIN_SRC emacs-lisp
(setq org-refile-targets (append '((org-default-media-file :level . 1)
                                   (org-default-notes-file :level . 0))
                                 (->>
                                  (directory-files org-default-projects-dir nil ".org")
                                  (-remove-item (file-name-base org-default-media-file))
                                  (--remove (s-starts-with? "." it))
                                  (--map (format "%s/%s" org-default-projects-dir it))
                                  (--map `(,it :level . 0)))))

#+END_SRC

** Refiling programatically
Now, let’s create functions for the most-used refile destinations used by the
Hydra (notice that the Hydra can also call org-refile directly in order to get
access to all targets):

#+BEGIN_SRC emacs-lisp
(defun org-refile-to-incubate ()
  "Refile (move) the current Org subtree to `org-default-incubate-file'."
  (interactive)
  (org-refile nil nil (list nil org-default-incubate-file nil nil)))

(defun org-refile-to-task ()
  "Refile (move) the current Org subtree to `org-default-tasks-file'."
  (interactive)
  (org-refile nil nil (list nil org-default-tasks-file nil nil)))

(defun org-refile-to-personal-notes ()
  "Refile (move) the current Org subtree to `org-default-notes-file'."
  (interactive)
  (org-refile nil nil (list nil org-default-notes-file nil nil)))

(defun org-refile-to-completed ()
  "Refile (move) the current Org subtree to `org-default-completed-file',
unless it doesn't exist, in which case, refile to today's journal entry."
  (interactive)
  (if (and org-default-completed-file (file-exists-p
                                       org-default-completed-file))
      (org-refile nil nil (list nil org-default-completed-file nil nil))
    (org-refile nil nil (list nil get-journal-file-today nil nil))))

#+END_SRC

** Scheduling and planning
While reviewing the collected ideas in my Inbox, I often need to tidy them
before moving them around. Add a TODO label to each task with T in my hydra, as
well as schedule a date with an S (as a task without due date is just a
wish). Before I move the subtree, I may need to change the header’s text (which
I added to the hydra with an R key):

#+BEGIN_SRC emacs-lisp
(defun org-rename-header (label)
  "Rename the current section's header to LABEL, and moves the
point to the end of the line."
  (interactive (list
                (read-string "Header: "
                             (substring-no-properties (org-get-heading t t t t)))))
  (org-back-to-heading)
  (replace-string (org-get-heading t t t t) label))

#+END_SRC

** Completing tasks
This function archives a subtree to today’s journal entry (marking the task
completed in the process):

#+BEGIN_SRC emacs-lisp
(defun org-archive-subtree-as-completed ()
  "Archives the current subtree to today's current journal entry."
  (interactive)
  ;; According to the docs for `org-archive-subtree', the state should be
  ;; automatically marked as DONE, but I don't notice that:
  (when (org-get-todo-state)
    (org-todo "DONE"))

  (let* ((org-archive-file (or org-default-completed-file
                               (todays-journal-entry)))
         (org-archive-location (format "%s::" org-archive-file)))
     (org-archive-subtree)))

#+END_SRC

The following function returns the filename of today’s journal entry (which I
can use as a refile destination):

#+BEGIN_SRC emacs-lisp
(defun todays-journal-entry ()
  "Return the full pathname to the day's journal entry file.
Granted, this assumes each journal's file entry to be formatted
with year/month/day, as in `20190104' for January 4th.

Note: `org-journal-dir' variable must be set to the directory
where all good journal entries live, e.g. ~/journal."
  (let* ((daily-name   (format-time-string "%Y%m%d"))
         (file-name    (concat org-journal-dir daily-name)))
    (expand-file-name file-name)))

#+END_SRC

** TODO Refiling trees to files
For now, I am just copying the functions stated in this essay: [[http://www.howardism.org/Technical/Emacs/getting-even-more-boxes-done.html][Refiling Trees
to Files]]
I will review the code to understand it and then customize to my needs.

#+BEGIN_SRC emacs-lisp
(defun org-subtree-metadata ()
  "Return a list of key aspects of an org-subtree. Includes the
following: header text, body contents, list of tags, region list
of the start and end of the subtree."
  (save-excursion
    ;; Jump to the parent header if not already on a header
    (when (not (org-at-heading-p))
      (org-previous-visible-heading 1))

    (let* ((context (org-element-context))
           (attrs   (second context))
           (props   (org-entry-properties)))

      (list :region     (list (plist-get attrs :begin) (plist-get attrs :end))
            :header     (plist-get attrs :title)
            :tags       (org-get-subtree-tags props)
            :properties (org-get-subtree-properties attrs)
            :body       (org-get-subtree-content attrs)))))

(defun org-get-subtree-tags (&optional props)
  "Given the properties, PROPS, from a call to
`org-entry-properties', return a list of tags."
  (unless props
     (setq props (org-entry-properties)))
  (let ((tag-label (if org-get-subtree-tags-inherited "ALLTAGS" "TAGS")))
    (-some->> props
         (assoc tag-label)
         cdr
         substring-no-properties
         (s-split ":")
         (--filter (not (equalp "" it))))))

(defvar org-get-subtree-tags-inherited t
  "Returns a subtree's tags, and all tags inherited (from tags
  specified in parents headlines or on the file itself). Defaults
  to true.")

(defun org-get-subtree-properties (attributes)
  "Return a list of tuples of a subtrees properties where the keys are strings."

  (defun symbol-upcase? (sym)
    (let ((case-fold-search nil))
      (string-match-p "^:[A-Z]+$" (symbol-name sym))))

  (defun convert-tuple (tup)
    (let ((key (first tup))
          (val (second tup)))
      (list (substring (symbol-name key) 1) val)))

  (->> attributes
       (-partition 2)                         ; Convert plist to list of tuples
       (--filter (symbol-upcase? (first it))) ; Remove lowercase tuples
       (-map 'convert-tuple)))

(defun org-get-subtree-content (attributes)
  "Return the contents of the current subtree as a string."
  (let ((header-components '(clock diary-sexp drawer headline inlinetask
                             node-property planning property-drawer section)))

      (goto-char (plist-get attributes :contents-begin))

      ;; Walk down past the properties, etc.
      (while
          (let* ((cntx (org-element-context))
                 (elem (first cntx))
                 (props (second cntx)))
            (when (member elem header-components)
              (goto-char (plist-get props :end)))))

      ;; At this point, we are at the beginning of what we consider
      ;; the contents of the subtree, so we can return part of the buffer:
      (buffer-substring-no-properties (point) (org-end-of-subtree))))

(defun org-refile-subtree-to-file (dir)
  "Archive the org-mode subtree and create an entry in the
directory folder specified by DIR. It attempts to move as many of
the subtree's properties and other features to the new file."
  (interactive "DDestination: ")
  (let* ((props      (org-subtree-metadata))
         (head       (plist-get props :header))
         (body       (plist-get props :body))
         (tags       (plist-get props :tags))
         (properties (plist-get props :properties))
         (area       (plist-get props :region))
         (filename   (org-filename-from-title head))
         (filepath   (format "%s/%s.org" dir filename)))
    (apply #'delete-region area)
    (org-create-org-file filepath head body tags properties)))

(defun org-create-org-file (filepath header body tags properties)
  "Create a new Org file by FILEPATH. The contents of the file is
pre-populated with the HEADER, BODY and any associated TAGS."
  (find-file-other-window filepath)
  (org-set-file-property "TITLE" header t)
  (when tags
    (org-set-file-property "FILETAGS" (s-join " " tags)))

  ;; Insert any drawer properties as #+PROPERTY entries:
  (when properties
    (goto-char (point-min))
    (or (re-search-forward "^\s*$" nil t) (point-max))
    (--map (insert (format "#+PROPERTY: %s %s" (first it) (second it))) properties))

  ;; My auto-insert often adds an initial headline for a subtree, and in this
  ;; case, I don't want that... Yeah, this isn't really globally applicable,
  ;; but it shouldn't cause a problem for others.
  (when (re-search-forward "^\\* [0-9]$" nil t)
    (replace-match ""))

  (delete-blank-lines)
  (goto-char (point-max))
  (insert "\n")
  (insert body))

(defun org-filename-from-title (title)
  "Creates a useful filename based on a header string, TITLE.
For instance, given the string:    What's all this then?
     This function will return:    whats-all-this-then"
  (let* ((no-letters (rx (one-or-more (not alphanumeric))))
         (init-try (->> title
                        downcase
                        (replace-regexp-in-string "'" "")
                        (replace-regexp-in-string no-letters "-"))))
    (string-trim init-try "-+" "-+")))

(defun org-set-file-property (key value &optional spot)
  "Make sure file contains a top-level, file-wide property.
KEY is something like `TITLE' or `FILETAGS'. This function makes
sure that the property contains the contents of VALUE, and if the
file doesn't have the property, it is inserted at either SPOT, or
if nil,the top of the file."
  (save-excursion
    (goto-char (point-min))
    (let ((case-fold-search t))
      (if (re-search-forward (format "^#\\+%s:\s*\\(.*\\)" key) nil t)
          (replace-match value nil nil nil 1)

        (cond
         ;; if SPOT is a number, go to it:
         ((numberp spot) (goto-char spot))
         ;; If SPOT is not given, jump to first blank line:
         ((null spot) (progn (goto-char (point-min))
                             (re-search-forward "^\s*$" nil t)))
         (t (goto-char (point-min))))

        (insert (format "#+%s: %s\n" (upcase key) value))))))

(defun org-refile-to-projects-dir ()
  "Move the current subtree to a file in the `projects' directory."
  (interactive)
  (org-refile-subtree-to-file org-default-projects-dir))

(defun org-refile-to-technical-dir ()
  "Move the current subtree to a file in the `technical' directory."
  (interactive)
  (org-refile-subtree-to-file org-default-technical-dir))

(define-auto-insert "/personal/*\\.org" ["personal.org" ha/autoinsert-yas-expand])

(defun org-refile-to-personal-dir ()
  "Move the current subtree to a file in the `personal' directory."
  (interactive)
  (org-refile-subtree-to-file org-default-personal-dir))


#+END_SRC


*** Old version
#+BEGIN_SRC emacs-lisp
(defun cp/org-refile-subtree-as-file (dir)
  "Archive the org-mode subtree and create an entry in the directory folder specified by DIR.
The formatting, since it is an archive, isn't quite what I want,but it gets it going."
  (let* ((header (substring-no-properties (org-get-heading)))
         (title (if (string-match ": \\(.*\\)" header)
                    (match-string 1 header)
                  header))
         (filename (replace-regexp-in-string "\s+" "-" (downcase title)))
         (filepath (format "%s/%s.org" dir filename))
         (org-archive-location (format "%s::" filepath)))
    (org-archive-subtree)
    (find-file-other-window filepath)))
#+END_SRC

** Summary
We now have a Hydra that easily kicks off functions that help keep my task
inbox manageable. Each morning, I would like to start an environment when my
Inbox is loaded and ready for refiling. The following function does that by
calling functions I would normally do manually:

#+BEGIN_SRC emacs-lisp
(defun org-boxes-workflow ()
  "Load the default tasks file and start our hydra on the first task shown."
  (interactive)
  (let ((org-startup-folded nil))
    (find-file org-default-inbox-file)
    (delete-other-windows)
    (ignore-errors
      (cp/org-agenda))
    (delete-other-windows)
    (split-window-right-and-focus)
    (pop-to-buffer (get-file-buffer org-default-inbox-file))
    (goto-char (point-min))
    (org-next-visible-heading 1)
    (hydra-org-refiler/body)))

#+END_SRC

This assumes that I have a special agenda display:

#+BEGIN_SRC emacs-lisp
(defun cp/org-agenda ()
  "Displays my favorite agenda perspective."
  (interactive)
  (org-agenda nil "a")
  (get-buffer "*Org Agenda*")
  (execute-kbd-macro (kbd "A t")))

#+END_SRC
